const আইপি = exports;
const { বাফার } = require('buffer');
const অপারেটিং_সিস্টেম = require('os');

আইপি.বাফারআন্দুলন = function (আইপি, বাফ, অফসেট) {
  অফসেট = ~~অফসেট;

  let ফলাফল;

  if (this.ভি৪ফর্ম্যাট(আইপি)) {
    ফলাফল = বাফ || বাফার.alloc(অফসেট + 4);
    আইপি.split(/\./g).map((বাইট) => {
      ফলাফল[অফসেট++] = parseInt(বাইট, 10) & 0xff;
    });
  } else if (this.ভি৬ফর্ম্যাট(আইপি)) {
    const সেকশন = আইপি.split(':', 8);

    let i;
    for (i = 0; i < সেকশন.length; i++) {
      const esV4 = this.ভি৪ফর্ম্যাট(সেকশন[i]);
      let v4বাফার;

      if (esV4) {
        v4বাফার = this.বাফারআন্দুলন(সেকশন[i]);
        সেকশন[i] = v4বাফার.slice(0, 2).toString('hex');
      }

      if (v4বাফার && ++i < 8) {
        সেকশন.splice(i, 0, v4বাফার.slice(2, 4).toString('hex'));
      }
    }

    if (সেকশন[0] === '') {
      while (সেকশন.length < 8) সেকশন.unshift('0');
    } else if (সেকশন[সেকশন.length - 1] === '') {
      while (সেকশন.length < 8) সেকশন.push('0');
    } else if (সেকশন.length < 8) {
      for (i = 0; i < সেকশন.length && সেকশন[i] !== ''; i++);
      const argv = [i, 1];
      for (i = 9 - সেকশন.length; i > 0; i--) {
        argv.push('0');
      }
      সেকশন.splice(...argv);
    }

    ফলাফল = বাফ || বাফার.alloc(অফসেট + 16);
    for (i = 0; i < সেকশন.length; i++) {
      const শব্দ = parseInt(সেকশন[i], 16);
      ফলাফল[অফসেট++] = (শব্দ >> 8) & 0xff;
      ফলাফল[অফসেট++] = শব্দ & 0xff;
    }
  }

  if (!ফলাফল) {
    throw Error(`অবৈধ আইপি ঠিকানা: ${আইপি}`);
  }

  return ফলাফল;
};

আইপি.স্ট্রিং = function (বাফ, অফসেট, দৈর্ঘ্য) {
  অফসেট = ~~অফসেট;
  দৈর্ঘ্য = দৈর্ঘ্য || (বাফ.length - অফসেট);

  let ফলাফল = [];
  if (দৈর্ঘ্য === 4) {
    // IPv4
    for (let i = 0; i < দৈর্ঘ্য; i++) {
      ফলাফল.push(বাফ[অফসেট + i]);
    }
    ফলাফল = ফলাফল.join('.');
  } else if (দৈর্ঘ্য === 16) {
    // IPv6
    for (let i = 0; i < দৈর্ঘ্য; i += 2) {
      ফলাফল.push(বাফ.readUInt16BE(অফসেট + i).toString(16));
    }
    ফলাফল = ফলাফল.join(':');
    ফলাফল = ফলাফল.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');
    ফলাফল = ফলাফল.replace(/:{3,4}/, '::');
  }

  return ফলাফল;
};

const ipv4Regex = /^(\d{1,3}\.){3,3}\d{1,3}$/;
const ipv6Regex = /^(::)?(((\d{1,3}\.){3}(\d{1,3}){1})?([0-9a-f]){0,4}:{0,2}){1,8}(::)?$/i;

আইপি.ভি৪ফর্ম্যাট = function (আইপি) {
  return ipv4Regex.test(আইপি);
};

আইপি.ভি৬ফর্ম্যাট = function (আইপি) {
  return ipv6Regex.test(আইপি);
};

function _স্বাভাবিক_ফ্যামিলি(ফ্যামিলি) {
  if (ফ্যামিলি === 4) {
    return 'ipv4';
  }
  if (ফ্যামিলি === 6) {
    return 'ipv6';
  }
  return ফ্যামিলি ? ফ্যামিলি.toLowerCase() : 'ipv4';
}

আইপি.পূর্বফলাফল = function (লম্বাPrefix, ফ্যামিলি) {
  if (লম্বাPrefix > 32) {
    ফ্যামিলি = 'ipv6';
  } else {
    ফ্যামিলি = _স্বাভাবিক_ফ্যামিলি(ফ্যামিলি);
  }

  let দৈর্ঘ্য = 4;
  if (ফ্যামিলি === 'ipv6') {
    দৈর্ঘ্য = 16;
  }
  const বাফ = বাফার.alloc(দৈর্ঘ্য);

  for (let i = 0, n = বাফ.length; i < n; ++i) {
    let বিট = 8;
    if (লম্বাPrefix < 8) {
      বিট = লম্বাPrefix;
    }
    লম্বাPrefix -= বিট;

    বাফ[i] = ~(0xff >> বিট) & 0xff;
  }

  return আইপি.স্ট্রিং(বাফ);
};

আইপি.মাস্ক = function (ঠিকানা, মাস্ক) {
  ঠিকানা = আইপি.বাফারআন্দুলন(ঠিকানা);
  মাস্ক = আইপি.বাফারআন্দুলন(মাস্ক);

  const ফলাফল = বাফার.alloc(Math.max(ঠিকানা.length, মাস্ক.length));

  // একই প্রোটোকল - বিট দ্বারা বিট AND
  let i;
  if (ঠিকানা.length === মাস্ক.length) {
    for (i = 0; i < ঠিকানা.length; i++) {
      ফলাফল[i] = ঠিকানা[i] & মাস্ক[i];
    }
  } else if (মাস্ক.length === 4) {
    // IPv6 ঠিকানা এবং IPv4 মাস্ক
    for (i = 0; i < মাস্ক.length; i++) {
      ফলাফল[i] = ঠিকানা[ঠিকানা.length - 4 + i] & মাস্ক[i];
    }
  } else {
    // IPv6 মাস্ক এবং IPv4 ঠিকানা
    for (i = 0; i < ফলাফল.length - 6; i++) {
      ফলাফল[i] = 0;
    }

    // ::ffff:ipv4
    ফলাফল[10] = 0xff;
    ফলাফল[11] = 0xff;
    for (i = 0; i < ঠিকানা.length; i++) {
      ফলাফল[i + 12] = ঠিকানা[i] & মাস্ক[i + 12];
    }
    i += 12;
  }
  for (; i < ফলাফল.length; i++) {
    ফলাফল[i] = 0;
  }

  return আইপি.স্ট্রিং(ফলাফল);
};
আইপি.cidr = function (cidrString) {
  const cidrParts = cidrString.split('/');

  const ঠিকানা = cidrParts[0];
  if (cidrParts.length !== 2) {
    throw new Error(`অবৈধ CIDR সাবনেট: ${ঠিকানা}`);
  }

  const মাস্ক = আইপি.পূর্বফলাফল(parseInt(cidrParts[1], 10));

  return আইপি.মাস্ক(ঠিকানা, মাস্ক);
};

আইপি.সাবনেট = function (ঠিকানা, মাস্ক) {
  const নেটওয়ার্কঠিকানা = আইপি.পূর্বফলাফল(আইপি.মাস্ক(ঠিকানা, মাস্ক));

  // মাস্কের দৈর্ঘ্য গণনা
  const মাস্কবাফ = আইপি.বাফারআন্দুলন(মাস্ক);
  let মাস্কদৈর্ঘ্য = 0;

  for (let i = 0; i < মাস্কবাফ.length; i++) {
    if (মাস্কবাফ[i] === 0xff) {
      মাস্কদৈর্ঘ্য += 8;
    } else {
      let অকটেট = মাস্কবাফ[i] & 0xff;
      while (অকটেট) {
        অকটেট = (অকটেট << 1) & 0xff;
        মাস্কদৈর্ঘ্য++;
      }
    }
  }

  const সংখ্যা_ঠিকানা = 2 ** (32 - মাস্কদৈর্ঘ্য);

  return {
    নেটওয়ার্কঠিকানা: আইপি.পূর্বফলাফল(নেটওয়ার্কঠিকানা),
    প্রথম_ঠিকানা: সংখ্যা_ঠিকানা <= 2
      ? আইপি.পূর্বফলাফল(নেটওয়ার্কঠিকানা)
      : আইপি.পূর্বফলাফল(নেটওয়ার্কঠিকানা + 1),
    শেষ_ঠিকানা: সংখ্যা_ঠিকানা <= 2
      ? আইপি.পূর্বফলাফল(নেটওয়ার্কঠিকানা + সংখ্যা_ঠিকানা - 1)
      : আইপি.পূর্বফলাফল(নেটওয়ার্কঠিকানা + সংখ্যা_ঠিকানা - 2),
    ডিফিউশন_ঠিকানা: আইপি.পূর্বফলাফল(নেটওয়ার্কঠিকানা + সংখ্যা_ঠিকানা - 1),
    সাবনেট_মাস্ক: মাস্ক,
    মাস্কদৈর্ঘ্য: মাস্কদৈর্ঘ্য,
    হোস্ট_সংখ্যা: সংখ্যা_ঠিকানা <= 2
      ? সংখ্যা_ঠিকানা : সংখ্যা_ঠিকানা - 2,
    দৈর্ঘ্য: সংখ্যা_ঠিকানা,
    contains(অন্য) {
      return নেটওয়ার্কঠিকানা === আইপি.পূর্বফলাফল(আইপি.মাস্ক(অন্য, মাস্ক));
    },
  };
};

আইপি.cidrSubnet = function (cidrString) {
  const cidrParts = cidrString.split('/');

  const ঠিকানা = cidrParts[0];
  if (cidrParts.length !== 2) {
    throw new Error(`অবৈধ CIDR সাবনেট: ${ঠিকানা}`);
  }

  const মাস্ক = আইপি.পূর্বফলাফল(parseInt(cidrParts[1], 10));

  return আইপি.সাবনেট(ঠিকানা, মাস্ক);
};

আইপি.না = function (ঠিকানা) {
  const বাফ = আইপি.বাফারআন্দুলন(ঠিকানা);
  for (let i = 0; i < বাফ.length; i++) {
    বাফ[i] = 0xff ^ বাফ[i];
  }
  return আইপি.স্ট্রিং(বাফ);
};

আইপি.অথবা = function (a, b) {
  a = আইপি.বাফারআন্দুলন(a);
  b = আইপি.বাফারআন্দুলন(b);

  // একই প্রোটোকল
  if (a.length === b.length) {
    for (let i = 0; i < a.length; ++i) {
      a[i] |= b[i];
    }
    return আইপি.স্ট্রিং(a);

    // মিশ্র প্রোটোকল
  }
  let বাফ = a;
  let অন্য = b;
  if (b.length > a.length) {
    বাফ = b;
    অন্য = a;
  }

  const সরানো = বাফ.length - অন্য.length;
  for (let i = সরানো; i < বাফ.length; ++i) {
    বাফ[i] |= অন্য[i - সরানো];
  }

  return আইপি.স্ট্রিং(বাফ);
};

আইপি.সমান = function (a, b) {
  a = আইপি.বাফারআন্দুলন(a);
  b = আইপি.বাফারআন্দুলন(b);

  // একই প্রোটোকল
  if (a.length === b.length) {
    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }

  // পালটানো
  if (b.length === 4) {
    const t = b;
    b = a;
    a = t;
  }

  // a - IPv4, b - IPv6
  for (let i = 0; i < 10; i++) {
    if (b[i] !== 0) return false;
  }

  const শব্দ = b.readUInt16BE(10);
  if (শব্দ !== 0 && শব্দ !== 0xffff) return false;

  for (let i = 0; i < 4; i++) {
    if (a[i] !== b[i + 12]) return false;
  }

  return true;
};

আইপি.প্রাইভেট = function (ঠিকানা) {
  // প্রথমে লুপব্যাক ঠিকানা চেক করুন
  if (আইপি.লুপব্যাক(ঠিকানা)) {
    return true;
  }

  // নিশ্চিত করুন যে IPv4 ঠিকানা বৈধ
  if (!আইপি.ভি৬ফর্ম্যাট(ঠিকানা)) {
    const ipl = আইপি.স্বাভাবিক_লম্বা(ঠিকানা);
    if (ipl < 0) {
      throw new Error('অবৈধ IPv4 ঠিকানা');
    }
    // ঠিকানা প্রাইভেট রেঞ্জ চেকের জন্য স্বাভাবিক করুন
    ঠিকানা = আইপি.পূর্বফলাফল(ipl);
  }

  // প্রাইভেট রেঞ্জ চেক করুন
  return /^(::f{4}:)?10\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ঠিকানা)
    || /^(::f{4}:)?192\.168\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ঠিকানা)
    || /^(::f{4}:)?172\.(1[6-9]|2\d|30|31)\.([0-9]{1,3})\.([0-9]{1,3})$/i
      .test(ঠিকানা)
    || /^(::f{4}:)?169\.254\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ঠিকানা)
    || /^f[cd][0-9a-f]{2}:/i.test(ঠিকানা)
    || /^fe80:/i.test(ঠিকানা)
    || /^::1$/.test(ঠিকানা)
    || /^::$/.test(ঠিকানা);
};

আইপি.পাবলিক = function (ঠিকানা) {
  return !আইপি.প্রাইভেট(ঠিকানা);
};

আইপি.লুপব্যাক = function (ঠিকানা) {
  // যদি IPv4 ঠিকানা দীর্ঘ সংখ্যার আকারে (পয়েন্ট বা ড্যাশ ছাড়া), এটি রূপান্তর করুন
  if (!/\./.test(ঠিকানা) && !/:/.test(ঠিকানা)) {
    ঠিকানা = আইপি.পূর্বফলাফল(Number(ঠিকানা));
  }

  return /^(::f{4}:)?127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/
    .test(ঠিকানা)
    || /^0177\./.test(ঠিকানা)
    || /^0x7f\./i.test(ঠিকানা)
    || /^fe80::1$/i.test(ঠিকানা)
    || /^::1$/.test(ঠিকানা)
    || /^::$/.test(ঠিকানা);
};

আইপি.loopback = function (ফ্যামিলি) {
  ফ্যামিলি = _স্বাভাবিক_ফ্যামিলি(ফ্যামিলি);

  if (ফ্যামিলি !== 'ipv4' && ফ্যামিলি !== 'ipv6') {
    throw new Error('ফ্যামিলি ipv4 বা ipv6 হতে হবে');
  }

  return ফ্যামিলি === 'ipv4' ? '127.0.0.1' : 'fe80::1';
};

আইপি.ঠিকানা = function (নাম, ফ্যামিলি) {
  const ইন্টারফেস = অপারেটিং_সিস্টেম.networkInterfaces();

  ফ্যামিলি = _স্বাভাবিক_ফ্যামিলি(ফ্যামিলি);

  if (নাম && নাম !== 'প্রাইভেট' && নাম !== 'পাবলিক') {
    const res = ইন্টারফেস[নাম].filter((বিস্তারিত) => {
      const পরিবারআইটেম = _স্বাভাবিক_ফ্যামিলি(বিস্তারিত.family);
      return পরিবারআইটেম === ফ্যামিলি;
    });
    if (res.length === 0) {
      return undefined;
    }
    return res[0].address;
  }

  const সব = Object.keys(ইন্টারফেস).map((nic) => {
    const ঠিকানাগুলি = ইন্টারফেস[nic].filter((বিস্তারিত) => {
      বিস্তারিত.family = _স্বাভাবিক_ফ্যামিলি(বিস্তারিত.family);
      if (বিস্তারিত.family !== ফ্যামিলি || আইপি.লুপব্যাক(বিস্তারিত.address)) {
        return false;
      } if (!নাম) {
        return true;
      }

      return নাম === 'পাবলিক' ? আইপি.প্রাইভেট(বিস্তারিত.address)
        : আইপি.পাবলিক(বিস্তারিত.address);
    });

    return ঠিকানাগুলি.length ? ঠিকানাগুলি[0].address : undefined;
  }).filter(Boolean);

  return !সব.length ? আইপি.loopback(ফ্যামিলি) : সব[0];
};

আইপি.পূর্বফলাফল = function (আইপি) {
  let ipl = 0;
  const parts = আইপি.split('.');

  for (let i = 0; i < 4; i++) {
    ipl |= parseInt(parts[i], 10) << (8 * (3 - i));
  }

  return ipl >>> 0;
};

module.exports = আইপি