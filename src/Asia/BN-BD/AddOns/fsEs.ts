import fs from 'fs/promises';
import iconv from 'iconv-lite'; // ржПржиржХрзЛржбрж┐ржВ ржоржбрж┐ржЙрж▓ржЯрж┐ ржЖржоржжрж╛ржирж┐ ржХрж░рзБржи

// ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рж┐рж░ ржЬржирзНржп ржЯрж╛ржЗржк рж╕ржВржЬрзНржЮрж╛ржпрж╝рж┐ржд ржХрж░рж╛
interface ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рж┐ {
  ржПржиржХрзЛржбрж┐ржВ?: string; // ржПржиржХрзЛржбрж┐ржВ ржмрж┐ржХрж▓рзНржк ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
}

export const fsржмрж╛ржЩрж╛рж▓рж┐ = {
  async ржлрж╛ржЗрж▓рж▓рзЗржЦрж╛(ржкрже: string, ржмрж┐рж╖рзЯржмрж╕рзНрждрзБ: string, ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рж┐: ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рж┐ = {}): Promise<void> {
    try {
      const ржПржиржХрзЛржбрж┐ржВ = ржмрж┐ржХрж▓рзНржкржЧрзБрж▓рж┐.ржПржиржХрзЛржбрж┐ржВ || 'utf-8';
      const ржмрж╛ржлрж╛рж░ = iconv.encode(ржмрж┐рж╖рзЯржмрж╕рзНрждрзБ, ржПржиржХрзЛржбрж┐ржВ); // ржмрж┐рж╖рзЯржмрж╕рзНрждрзБржЯрж┐ржХрзЗ ржХрж╛ржЩрзНржХрзНрж╖рж┐ржд ржПржиржХрзЛржбрж┐ржВрзЯрзЗрж░ ржмрж╛ржлрж╛рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░рж┐ржд ржХрж░рж╛
      await fs.writeFile(ржкрже, ржмрж╛ржлрж╛рж░);
      console.log('ржлрж╛ржЗрж▓ рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рзЗржЦрж╛ рж╣ржпрж╝рзЗржЫрзЗред');
    } catch (error) {
      console.error('ржлрж╛ржЗрж▓ рж▓рзЗржЦрж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:', error);
    }
  },

  async ржлрж╛ржЗрж▓ржЖржкржбрзЗржЯ(ржкрже: string, ржмрж┐рж╖рзЯржмрж╕рзНрждрзБ: string): Promise<void> {
    try {
      await fs.appendFile(ржкрже, "\n" + ржмрж┐рж╖рзЯржмрж╕рзНрждрзБ, "utf-8");
      console.log("ржлрж╛ржЗрж▓ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ");
    } catch (error) {
      console.log("ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ рждрзНрж░рзБржЯрж┐рж░ рж╕ржорзНржорзБржЦрзАржи рж╣ржпрж╝рзЗржЫрзЗ:", error);
    }
  },

  async ржлрж╛ржЗрж▓ржкрзЬрзБржи(ржлрж╛ржЗрж▓ржирж╛ржо: string): Promise<void> {
    try {
      const ржбрзЗржЯрж╛: string = await fs.readFile(ржлрж╛ржЗрж▓ржирж╛ржо, "utf-8");
      console.log(ржбрзЗржЯрж╛);
    } catch (error) {
      console.error("рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗ:", error);
    }
  },

  async ржлрж╛ржЗрж▓ржорзБржЫрзБржи(ржкрже: string): Promise<void> {
    try {
      await fs.unlink(ржкрже);
      console.log('ржлрж╛ржЗрж▓ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗред');
    } catch (error) {
      console.error('ржлрж╛ржЗрж▓ ржорзБржЫрждрзЗ рждрзНрж░рзБржЯрж┐:', error);
    }
  },

  async ржлрж╛ржЗрж▓ржирж╛ржоржкрзБржирж░рж╛рзЯ(ржкрзБрж░рж╛рждржиржкрже: string, ржирждрзБржиржкрже: string): Promise<void> {
    try {
      await fs.rename(ржкрзБрж░рж╛рждржиржкрже, ржирждрзБржиржкрже);
      console.log('ржлрж╛ржЗрж▓ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржкрзБржиржГржирж╛ржоржХрж░ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред');
    } catch (error) {
      console.error('ржлрж╛ржЗрж▓ ржкрзБржиржГржирж╛ржоржХрж░ржг ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐:', error);
    }
  },
  
  async ржбрж┐рж░рзЗржХрзНржЯрж░рж┐рждрзИрж░рж┐(ржкрже: string, ржмрж┐ржХрж▓рзНржк: { recursive?: boolean } = { recursive: false }): Promise<void> {
    try {
      // Usar 'recursive' en lugar de 'ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐'
      await fs.mkdir(ржкрже, ржмрж┐ржХрж▓рзНржк);
      console.log('ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рж╕ржарж┐ржХржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗред');
    } catch (error) {
      console.error('ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐:', error);
    }
  },

  async ржлрзЛрж▓рзНржбрж╛рж░рждрж╛рж▓рж┐ржХрж╛(ржкрже: string) {
    try {
      const ржЙржкрж╛ржжрж╛ржирж╕ржорзВрж╣ = await fs.readdir(ржкрже, { withFileTypes: true });
      ржЙржкрж╛ржжрж╛ржирж╕ржорзВрж╣.forEach(ржЙржкрж╛ржжрж╛ржи => {
        if (ржЙржкрж╛ржжрж╛ржи.isDirectory()) {
          console.log(`ЁЯУБ ржлрзЛрж▓рзНржбрж╛рж░: ${ржЙржкрж╛ржжрж╛ржи.name}`);
        } else {
          console.log(`ЁЯУД ржлрж╛ржЗрж▓: ${ржЙржкрж╛ржжрж╛ржи.name}`);
        }
      });
    } catch (error) {
      console.error('ржлрзЛрж▓рзНржбрж╛рж░ ржкржбрж╝рждрзЗ рждрзНрж░рзБржЯрж┐:', error);
    }
  },

  async ржлрж╛ржЗрж▓ржиржХрж▓(ржЙрждрзНрж╕ржкрже: string, ржЧржирзНрждржмрзНржпржкрже: string): Promise<void> {
    try {
      await fs.copyFile(ржЙрждрзНрж╕ржкрже, ржЧржирзНрждржмрзНржпржкрже);
      console.log('ржлрж╛ржЗрж▓ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржиржХрж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред');
    } catch (error) {
      console.error('ржлрж╛ржЗрж▓ ржиржХрж▓ ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐:', error);
    }
  },

  async ржлрж╛ржЗрж▓ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи(ржлрж╛ржЗрж▓ржкрже: string) {
    try {
      const ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи = await fs.stat(ржлрж╛ржЗрж▓ржкрже);

      console.log(`ЁЯУД ржлрж╛ржЗрж▓: ${ржлрж╛ржЗрж▓ржкрже}`);
      console.log(`- ржЖржХрж╛рж░: ${ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи.size} ржмрж╛ржЗржЯ`);
      console.log(`- рж╕рзГрж╖рзНржЯрж┐рж░ рждрж╛рж░рж┐ржЦ: ${ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи.birthtime}`);
      console.log(`- рж╕рж░рзНржмрж╢рзЗрж╖ ржкрж░рж┐ржмрж░рзНрждржи: ${ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи.mtime}`);
      console.log(`- ржПржЯрж┐ ржлрж╛ржЗрж▓: ${ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи.isFile()}`);
      console.log(`- ржПржЯрж┐ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐: ${ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи.isDirectory()}`);
    } catch (error) {
      console.error('ржлрж╛ржЗрж▓ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржкрзНрж░рж╛ржкрзНржд ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐:', error);
    }
  },
};
