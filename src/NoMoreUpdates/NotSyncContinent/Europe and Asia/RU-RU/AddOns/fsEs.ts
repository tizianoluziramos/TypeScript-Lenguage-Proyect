import fs from 'fs/promises';
import { Stats } from 'fs';
import iconv from 'iconv-lite'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
interface –û–ø—Ü–∏–∏ {
    encoding?: string; // –î–µ–ª–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π
}

export const fsRu = {
    async –∑–∞–ø–∏—Å–∞—Ç—å–§–∞–π–ª(–ø—É—Ç—å: string, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: string, –æ–ø—Ü–∏–∏: –û–ø—Ü–∏–∏ = {}): Promise<void> {
        try {
            const encoding = –æ–ø—Ü–∏–∏.encoding || 'utf-8';
            const buffer = iconv.encode(—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, encoding); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±—É—Ñ–µ—Ä —Å –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
            await fs.writeFile(–ø—É—Ç—å, buffer);
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', error);
        }
    },

    async –æ–±–Ω–æ–≤–∏—Ç—å–§–∞–π–ª(–ø—É—Ç—å: string, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: string): Promise<void> {
        try {
              await fs.appendFile(–ø—É—Ç—å, "\n" + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, "utf-8");
              console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
            } catch (error) {
             console.log("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:", error);
        }
    },

    async –ø—Ä–æ—á–∏—Ç–∞—Ç—å–§–∞–π–ª(–∏–º—è–§–∞–π–ª–∞: string): Promise<void> {
        try {
          const data: string = await fs.readFile(–∏–º—è–§–∞–π–ª–∞, "utf-8");
          console.log(data);
        } catch (error) {
          console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
        }
      },

    async —É–¥–∞–ª–∏—Ç—å–§–∞–π–ª(–ø—É—Ç—å: string): Promise<void> {
        try {
            await fs.unlink(–ø—É—Ç—å);
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
        }
    },

    async –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å–§–∞–π–ª(—Å—Ç–∞—Ä–∞—è–ü—É—Ç—å: string, –Ω–æ–≤–∞—è–ü—É—Ç—å: string): Promise<void> {
        try {
            await fs.rename(—Å—Ç–∞—Ä–∞—è–ü—É—Ç—å, –Ω–æ–≤–∞—è–ü—É—Ç—å);
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
        }
    },

    async —Å–æ–∑–¥–∞—Ç—å–ö–∞—Ç–∞–ª–æ–≥(–ø—É—Ç—å: string, –æ–ø—Ü–∏–∏: { recursive?: boolean } = { recursive: false }): Promise<void> {
        try {
            await fs.mkdir(–ø—É—Ç—å, –æ–ø—Ü–∏–∏);
            console.log('–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        }
    },

    async –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å–ö–∞—Ç–∞–ª–æ–≥(–ø—É—Ç—å: string) {
      try {
        const —ç–ª–µ–º–µ–Ω—Ç—ã = await fs.readdir(–ø—É—Ç—å, { withFileTypes: true });
        —ç–ª–µ–º–µ–Ω—Ç—ã.forEach(—ç–ª–µ–º–µ–Ω—Ç => {
          if (—ç–ª–µ–º–µ–Ω—Ç.isDirectory()) {
            console.log(`üìÅ –ü–∞–ø–∫–∞: ${—ç–ª–µ–º–µ–Ω—Ç.name}`);
          } else {
            console.log(`üìÑ –§–∞–π–ª: ${—ç–ª–µ–º–µ–Ω—Ç.name}`);
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      }
    },

    async –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å–§–∞–π–ª(–ø—É—Ç—å–ò—Å—Ç–æ—á–Ω–∏–∫: string, –ø—É—Ç—å–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: string): Promise<void> {
        try {
            await fs.copyFile(–ø—É—Ç—å–ò—Å—Ç–æ—á–Ω–∏–∫, –ø—É—Ç—å–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ);
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
        }
    },

    async –ø–æ–ª—É—á–∏—Ç—å–°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É(–ø—É—Ç—å–§–∞–π–ª–∞: string) {
      try {
        const —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ = await fs.stat(–ø—É—Ç—å–§–∞–π–ª–∞);
        
        console.log(`üìÑ –§–∞–π–ª: ${–ø—É—Ç—å–§–∞–π–ª–∞}`);
        console.log(`- –†–∞–∑–º–µ—Ä: ${—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.size} –±–∞–π—Ç`);
        console.log(`- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.birthtime}`);
        console.log(`- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.mtime}`);
        console.log(`- –≠—Ç–æ —Ñ–∞–π–ª: ${—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.isFile()}`);
        console.log(`- –≠—Ç–æ –∫–∞—Ç–∞–ª–æ–≥: ${—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.isDirectory()}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞:', error);
      }
    },  
};
